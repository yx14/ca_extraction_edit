function [A_or,C_or,S_or, P_or,srt] = order_ROIs(Y,A,C,b, f, S,P,options, srt)

% ordering of the found components based on their maximum temporal
% activation and their size (through their l_inf norm)
% you can also pre-specify the ordering sequence
if ~isfield(options,'px_min') || isempty(options.px_min); px_min = 100; else px_min = options.px_min;    end    % # of rows
if ~isfield(options, 'px_max') || isempty(options.px_max); px_max = 10000; else px_max = options.px_max; end
if ~isfield(options, 'max_df_f') || isempty(options.max_df_f); df_f = 1.; else df_f = options.max_df_f; end
 
score_arr = zeros(1, size(A, 2) );
%Conditions for removal:
%1. if the component fills more than 50% of the rectangular area (formed by
%range of x and y coordinates)
%2. if the components' pixel number is out of the range [px_min, px_max]
%3. if the max Df/F value is smaller than 1
px_min = 50;
px_max = 10000;
nA = sqrt(sum(A.^2))';
[K,~] = size(C);
A_temp = A/spdiags(nA,0,K,K);    % normalize spatial components to unit energy
C_temp = spdiags(nA,0,K,K)*C;
[~,Df] = extract_DF_F(Y,[A_temp,b],[C_temp;f],size(A_temp,2)+1);
 
for i = 1: size(A, 2)
    %1 and 2.
    res = reshape(A(:, i), [options.d1, options.d2]); 
    [xpos, ypos, ~] = find(res); 
    filled = length(find(res(min(xpos):max(xpos) , min(ypos):max(ypos))));
    t1 = max(range(xpos), 1);
    t2 = max(range(ypos), 1);
    %3. 
    df_f = C_temp(i,:)/Df(i);
    %Conditions, in order. 
    if ~(isempty(t1) || isempty(t2)) && filled/(t1*t2) < 0.5 && length(xpos) < px_max && length(xpos) > px_min && max(df_f) > 1
        score_arr(1, i) = 1;
    end  
end

%remove components, assumes at least one 'real' axon 

Atemp = A(:, score_arr < 1); 
Ctemp = C(score_arr < 1, :);
Stemp = S(score_arr < 1, :); 

A(:, score_arr < 1) = [];
C(score_arr < 1, :) = []; 
S(score_arr < 1, :) = []; 

%order by linearity, spatial and temporal activity
%reshape A to d1*d2*T;  
A_or3 = reshape(full(A), [options.d1, options.d2, size(A, 2)]);
%calculate the R^2 values of x and y - "linearity"
r_vals = zeros(size(A, 2), 1); 
for i = 1: size(A, 2);
    A_vec = A_or3(:, :, i);
    %get x,y coords and values of nonzero indices 
    [x_coords, y_coords, ~] = find(A_vec);
    x_coords(:, 2) = ones(size(y_coords, 1), 1);
    [~, ~, ~, ~, stats1] = regress(y_coords, x_coords); 
    r_val1 = stats1(1); 
    %rotate it 30 degrees and calculate the correlation again (in case it's
    %vertical/horizontal the first time). appends maximum of the two
    %correlations to r_vals. 
    x_coords2 = cos(30)*x_coords(:, 1) - sin(30)*y_coords;
    y_coords2 = sin(30)*x_coords(:, 1) + cos(30)*y_coords;
    x_coords2(:, 2) = ones(size(y_coords, 1), 1); 
    [~, ~, ~, ~, stats2] = regress(y_coords2, x_coords2);
    r_val2 = stats2(1); 
    r_vals(i, 1) = max(r_val1, r_val2);  
end

nA = sqrt(sum(A.^2));
nr = length(nA);
%A = A/spdiags(nA(:),0,nr,nr);
%C = spdiags(nA(:),0,nr,nr)*C;
mA = sum(A.^4).^(1/4);
%sA = sum(A); initially blocked out 
mC = max(C,[],2);

if ~exist('srt', 'var')||isempty(srt)
    %[~, srt] = sort(r_vals.*pixl_dif, 'descend');
    [~,srt] = sort(r_vals.*mC.*mA','descend');
end

A_or = A(:,srt);
C_or = C(srt,:);
 
if nargin < 4
    P_or = [];
else
    P_or = P;
end

if nargin < 3 || isempty(S)
    S_or = [];
else
    S_or = S(srt,:);
    
A_or = horzcat(A_or, Atemp);
C_or = vertcat(C_or, Ctemp);
S_or = vertcat(S_or, Stemp);
disp(
end